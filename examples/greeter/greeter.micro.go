// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: greeter.proto

/*
Package greeter is a generated protocol buffer package.

It is generated from these files:
	greeter.proto

It has these top-level messages:
	Request
	Response
*/
package greeter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Greeter service

type GreeterServiceClient interface {
	Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type greeterService struct {
	c           client.Client
	serviceName string
}

func NewGreeterServiceClient(serviceName string, c client.Client) GreeterServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "greeter"
	}
	return &greeterService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *greeterService) Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "GreeterService.Hello", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GreeterService service

type GreeterServiceHandler interface {
	Hello(context.Context, *Request, *Response) error
}

func RegisterGreeterServiceHandler(s server.Server, hdlr GreeterServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&GreeterService{hdlr}, opts...))
}

type GreeterService struct {
	GreeterServiceHandler
}

func (h *GreeterService) Hello(ctx context.Context, in *Request, out *Response) error {
	return h.GreeterServiceHandler.Hello(ctx, in, out)
}
